Arsenal Kit Release Notes
(c) 2012-2023 Fortra, LLC and its group of companies. All trademarks and registered trademarks are the property of their respective owners.
-------------

January 25, 2024 - Arsenal Kit
-------------
++ Mutator Kit
+ Added a new kit that can be used to generate mutated sleep masks.

October 10, 2023 - Arsenal Kit
-------------
+ Fix issue with the list of valid sleep mask versions in the arsenal_kit.config

++ User Defined Reflective Loader for Visual Studio (UDRL-VS) Kit
+ Added additional comments around x86 loaders and the use of the GetLocation() function.
+ Fix calculations for loader start address with x86 loaders.
+ Fix the bud-loader and default-loader to use the loaderStart address when calling entry point for the 2nd time.

September 19, 2023 - Arsenal Kit
-------------
++ Artifact Kit
+ Updated the artifact stage_size to support 4.9 beacons.
+ Updated information on the Reflective Loader Size (rdll_size) setting based on changes to the BEACON_RDLL_SIZE hook with the 4.9 release.
+ Fix compiler issues with the latest version of MinGW (Minimalist GNU for Windows).

++ Beacon Object File Visual Studio (BOF-VS) Kit
+ Moved the BOF-VS Kit to https://github.com/Cobalt-Strike/bof-vs

++ Sleep Mask Kit
+ Added a 2nd attempt to bypass Control Flow Guard (CFG) if the NTSTATUS is set to invalid parameter.
+ Added Sleep Mask version 4.9 in order to use BeaconInformation BOF API added with the 4.9 release.
  This code exists under the kits/sleepmask/src49 directory
! Removed support for sleep mask versions 4.6 and earlier.

++ User Defined Reflective Loader for Visual Studio (UDRL-VS) Kit
+ Added an example UDRL for post-ex DLLs.
+ Added Beacon User Data (BUD) example.
+ Fix issue when using DEBUG build in the FindBufferBaseAddressStephenFewer function.

September 11, 2023 - Arsenal Kit
-------------
++ User Defined Reflective Loader for Visual Studio (UDRL-VS) Kit
+ Updated the UDRl-VS Kit to a UDRL library.
+ Updated the default-loader example to work with the UDRL library
+ Added the obfuscation-loader example to go along with this Cobalt Strike blog post.
  https://cobaltstrike.com/blog/revisiting-the-udrl-part-2-obfuscation-masking

August 15, 2023 - Arsenal Kit
-------------
++ Beacon Object File Visual Studio (BOF-VS) Kit
+ Fix a bug in string arguments packing

August 9, 2023 - Arsenal Kit
-------------
++ Beacon Object File Visual Studio (BOF-VS) Kit
+ Added a Visual Studio project template to simplify BOF development.

March 15, 2023 - Arsenal Kit
-------------
++ User Defined Reflective Loader for Visual Studio (UDRL-VS) Kit
+ Added a new kit that aims to simplify development and debugging of UDRLs for Cobalt Strike.
+ Provides the source code to go along with this Cobalt Strike blog post.
  https://cobaltstrike.com/blog/revisiting-the-udrl-part-1-simplifying-development


March 07, 2023 - Arsenal Kit
-------------
++ Artifact Kit
+ Added support for use of System Calls with the artifacts
+ Updated build.sh script with additional arguments
+ Fix help text for artifact kit build script

++ Sleep Mask Kit
+ Added support for use of System Calls with the MASK_TEXT_SECTION capability
+ Added sleepmask_mask_text_section to the arsenal_kit.config file
+ Added define tags for the Windows API functions to remove the need for LIBRARY$Function syntax
+ Added an implementation of evasive sleep with stack spoofing (x64 only)
+ Added a bypass for Control Flow Guard (CFG) for the evasive sleep capability
+ Added a helper utility getFunctionOffset to help with stack spoofing capability
+ Updated build.sh script with additional arguments
+ Updated Windows API function definitions in kits/sleepmask/src47/bofdefs.h
+ Updated Sleep Mask size limit from 8192 to 16384 bytes (version 4.8+)
+ Fix issue with evasive sleep when interactive mode is used


December 05, 2022 - Arsenal Kit
-------------
++ Mimikatz Kit
+ Updated the Mimikatz Kit version to 2.2.0 20220919.
+ Added a mimikatz-max dll version, see kits/mimikatz/README.md file for more information


August 17, 2022 - Arsenal Kit
-------------
++ Sleep Mask Kit
+ Continue to support Sleep Mask kit for Cobalt Strike versions 4.5 and 4.6
  This code exists under the kits/sleepmask/src directory
+ Updated Sleep Mask to be executed as a BOF for Cobalt Strike version 4.7+
  This code exists under the kits/sleepmask/src47 directory
+ Sleep Mask size limit increased from 769 to 8192 bytes (version 4.7+)
+ Updates to the Sleep Mask script template
  Added additional error checking on return values from aggressor script functions
  Updated script template to output both the object and extracted Sleep Mask sizes.
+ Added example code for additional functionality with Sleep Mask (turned off by default)
  These examples are controlled by define tags found in kits/sleepmask/src47/sleepmask.c
  MASK_TEXT_SECTION   - Mask the beacon's .text section when stage.userwx is set to false.
  EVASIVE_SLEEP       - Obfuscate the Sleep Mask code using CreateTimerQueueTimer method. (x64 only)
  LOG_SLEEPMASK_PARMS - Log Sleep Mask parameters on startup to the beacon console.

++ User Defined Reflective Loader (UDRL) Kit
+ Updates to the UDRL script template
  Added log_pe function to display export function information to script console.
  Added log_pe_map (function call commented out) to log all the keys.
  Added additional error checking on return values from aggressor script functions
  Updated script to output both the object and extracted UDRL sizes.

June 13, 2022 - Arsenal Kit
-------------
++ Artifact Kit
+ Add support for thread stack spoofing.  For more information see kits/artifact/README_STACK_SPOOF.md


April 27, 2022 - Arsenal Kit
-------------
++ Arsenal Kit
+ Updates to support whitespace in file path names.

++ Artifact Kit
+ Refactor the build.sh script for the Artifact Kit
  Resolved Minimalist GNU for Windows dllwrap deprecation warning.
  Resolved <artifact> is not 4-byte error message.
+ Changed <artifact> is not 4-byte error message to an OPSEC warning as it is unusual for a Windows exe or dll.


April 18, 2022 - Arsenal Kit
-------------
++ Arsenal Kit
+ A new kit which combines the following individual kits into a single kit.
  Artifact Kit
  Mimikatz Kit
  Process Inject Kit
  Resource Kit
  Sleep Mask Kit
  User Defined Reflective Loader (UDRL) Kit
+ A new ./arsenal-kit/arsenal_kit.config file which defines the variables to build the single kit.
+ A new ./arsenal-kit/build_arsenal_kit.sh script which builds the enabled kits into a single kit.
+ Supports building individual kits by using the ./arsenal-kit/kits/<kit_name>/build.sh script.
+ Information on individual kits and supported Cobalt Strike versions is in ./arsenal-kit/README.md.

++ Artifact Kit
+ Replaces the original Artifact Kit located on the Cobalt Strike Arsenal page.
+ Updated XOR key from 4 bytes to 8 bytes.
+ Added bypass technique 'bypass-readfile-v2' which is a minor modification to 'bypass-readfile'.
+ Added bypass technique 'bypass-mailslot'.
+ Added new command 'ak-settings' which is only available with this kit.
  ak-settings             - Displays the current settings.
  ak-settings service     - Set the name that is returned by the PSEXEC_SERVICE hook.
  ak-settings spawnto_x86 - Set the migration process to use for the service executable artifacts.
  ak-settings spawnto_x64 - Set the migration process to use for the service executable artifacts.
+ Added new parameters to the Build script to control how the Artifact Kit is compiled.
  Techniques       - Which bypass technique to build. Building the individual kit supports a list.
  Allocator        - Which memory allocator will be used for the reflective loader.
  Stage Size       - Set the Stage Size to use for a stageless beacon.
  RDLL Size        - Set the RDLL size to use, which is used to validate Stage Size value.
  Resource File    - Include the resource file [true or false].
  Output Directory - Destination directory to save the output.
+ Updated the Build script to work with the Arsenal Kit or as an individual kit.
+ Updated the Aggressor script with logging to the script console.

++ Mimikatz Kit
+ Replaces the original Mimikatz Kit version 2.2.0 20210810-2 located on the Cobalt Strike Arsenal page.
+ These Mimikatz dlls are already integrated into Cobalt Strike version 4.5 and 4.6
+ Added a Build script to work with the Arsenal Kit or as an individual kit.
+ Updated the Aggressor script with logging to the script console.

++ Process Inject Kit
+ Provides the source code which was included in this Cobalt Strike blog post.
  https://www.cobaltstrike.com/blog/process-injection-update-in-cobalt-strike-4-5/
+ Added a Build script to work with the Arsenal Kit or as an individual kit.
+ Updated the Aggressor script with logging to the script console.

++ Resource Kit
+ Replaces the original Resource Kit located on the Cobalt Strike Arsenal page.
+ Code changes from the original only include renaming of variables.
+ Added a Build script to work with the Arsenal Kit or as an individual kit.
+ Updated the Aggressor script with logging to the script console.

++ Sleep Mask Kit
+ Replaces the original Sleep Mask Kit (4.5) located on the Cobalt Strike Arsenal page.
+ No code changes were done for the Sleep Mask source code.
+ Updated the Build script to work with the Arsenal Kit or as an individual kit.
+ Updated the Aggressor script with logging to the script console.

++ User Defined Reflective Loader (UDRL) Kit
+ Replaces the original UDRL Kit located on the Cobalt Strike Arsenal page.
+ This example is based on Stephen Fewer classic reflective loader project.
+ Only supports compiling with MinGW (Minimalist GNU for Windows).
+ Updated the Build script to work with the Arsenal Kit or as an individual kit.
+ Build script supports passing the RDLL Size variable which is used by the BEACON_RDLL_SIZE hook.
+ Added information about Malleable C2 Profile settings in the README.md for the URDL Kit.
+ Improved Aggressor script for generating an artifact through the BEACON_RDLL_GENERATE hook.
  Added additional logging to the script console.
  Added example functions for modifying the artifact with information from the Malleable C2 profile.
  Added example call to the setup_strings aggressor function (added in 4.6).
  Added example call to the setup_transformations aggressor function (added in 4.6).

*
*	x_ovfl.sa 1.6 10/1/90
*
*	fpsp_ovfl --- FPSP handler for overflow exception
*
*	Overflow occurs when a floating-point intermediate result is
*	too large to be represented in a floating-point data register,
*	or when storing to memory, the contents of a floating-point
*	data register are too large to be represented in the
*	destination format.
*		
* Trap disabled results
*
*	If the instruction is move_out, then garbage is stored in the
*destination.  If the instruction is not move_out, then the destination is not
*affected.  For 68881 compatibility, the following values should be stored at
*the destination, based on the current rounding mode:
*
*  RN	Infinity with the sign of the intermediate result.
*  RZ	Largest magnitude number, with the sign of the intermediate result.
*  RM   For pos overflow, the largest pos number. For neg overflow, -infinity
*  RP   For pos overflow, +infinity. For neg overflow, the largest neg number
*
* Trap enabled results
*	All trap disabled code applies.  In addition the exceptional operand
*needs to be made available to the users exception handler with a bias of $6000
*subtracted from the exponent.
*
*

*		Copyright (C) Motorola, Inc. 1990
*			All Rights Reserved
*
*	THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF MOTOROLA 
*	The copyright notice above does not evidence any  
*	actual or intended publication of such source code.

X_OVFL	IDNT    2,1 Motorola 040 Floating Point Software Package

	section	8

	include	fpsp.h

	xref	ovf_r_x2
	xref	ovf_r_x3
	xref	store
	xref	real_ovfl
	xref	real_inex
	xref	fpsp_done
	xref	g_opcls

	xdef	fpsp_ovfl
fpsp_ovfl:
	link		a6,#-LOCAL_SIZE
	fsave		-(a7)
	movem.l		d0-d7,USER_D0(a6)
	movem.l		a0-a1,USER_A0(a6)
	fmovem.x	fp0/fp1,USER_FP0(a6)
	fmovem.l	fpcr/fpsr/fpiar,USER_FPCR(a6)
*
*	The 040 doesn't set the AINEX bit in the FPSR, the following line
*	temporarily rectifies this error.
*
	bset.b	#ainex_bit,FPSR_AEXCEPT(a6)
*
	bsr	ovf_adj		;denormalize, round & store interm op
*
*	if overflow traps not enabled check for inexact exception
*
	btst.b	#ovfl_bit,FPCR_ENABLE(a6)
	beq.b	ck_inex	
*
	movem.l		USER_D0(a6),d0-d7
	movem.l		USER_A0(a6),a0-a1
	fmovem.x	USER_FP0(a6),fp0/fp1
	fmovem.l	USER_FPCR(a6),fpcr/fpsr/fpiar
	frestore	(a7)+
	unlk		a6
	bra		real_ovfl
*
* If inexact trap not enabled, then we are done
*
ck_inex:
	btst.b	#inex2_bit,FPCR_ENABLE(a6)
	beq.b	ovfl_exit
	btst.b	#inex2_bit,FPSR_EXCEPT(a6)
	beq.b	ovfl_exit
*
* Inexact enabled and reported, and we must take an inexact exception
*
	move.b		#INEX_VEC,EXC_VEC+1(a6)
	movem.l		USER_D0(a6),d0-d7
	movem.l		USER_A0(a6),a0-a1
	fmovem.x	USER_FP0(a6),fp0/fp1
	fmovem.l	USER_FPCR(a6),fpcr/fpsr/fpiar
	frestore	(a7)+
	unlk		a6
	bra		real_inex
	
ovfl_exit:
	movem.l		USER_D0(a6),d0-d7
	movem.l		USER_A0(a6),a0-a1
	fmovem.x	USER_FP0(a6),fp0/fp1
	fmovem.l	USER_FPCR(a6),fpcr/fpsr/fpiar

	bclr.b	#E3,E_BYTE(a6)	;test and clear E3 bit
	beq.b	e1_set
*
	frestore	(a7)+
e1_set:
	unlk		a6
	bra		fpsp_done

*
*	ovf_adj
*
ovf_adj:
*
* Have a0 point to the correct operand. 
*
	btst.b	#E3,E_BYTE(a6)	;test E3 bit
	beq.b	ovf_e1

	lea	WBTEMP(a6),a0
	bra.b	ovf_com
ovf_e1:
	lea	FPTEMP(a6),a0

ovf_com:
	bclr.b	#sign_bit,LOCAL_EX(a0)
	sne	LOCAL_SGN(a0)

	bsr	g_opcls		;returns opclass in d0
	cmpi.w	#3,d0		;check for opclass3
	bne.b	not_opc011

* FPSR_CC is saved and restored because ovf_r_x3 affects it. The FPSR_CC is
* defined to be 'not affected' for the opclass3 instruction.
	move.b	FPSR_CC(a6),L_SCR1(a6)
 	bsr	ovf_r_x3	;returns a0 pointing to result, affects FPSR
	move.b	L_SCR1(a6),FPSR_CC(a6)
	bra	store		;stores to memory or register
	
not_opc011:
	bsr	ovf_r_x2	;returns a0 pointing to result, affects FPSR
	bra	store		;stores to memory or register

	end

*
*	stanh.sa 1.4 10/1/90
*
*	The entry point sTanh computes the hyperbolic tangent of
*	an input argument; sTanhd does the same except for denormalized
*	input.
*
*	Input: Double-extended number X in location pointed to
*		by address register a0.
*
*	Output: The value tanh(X) returned in floating-point register Fp0.
*
*	Accuracy and Monotonicity: The returned result is within 3 ulps in
*		64 significant bit, i.e. within 0.5001 ulp to 53 bits if the
*		result is subsequently rounded to double precision. The
*		result is provably monotonic in double precision.
*
*	Speed: The program stanh takes approximately 270 cycles.
*
*	Algorithm:
*
*	TANH
*	1. If |X| >= (5/2) log2 or |X| <= 2**(-40), go to 3.
*
*	2. (2**(-40) < |X| < (5/2) log2) Calculate tanh(X) by
*		sgn := sign(X), y := 2|X|, z := expm1(Y), and
*		tanh(X) = sgn*( z/(2+z) ).
*		Exit.
*
*	3. (|X| <= 2**(-40) or |X| >= (5/2) log2). If |X| < 1,
*		go to 7.
*
*	4. (|X| >= (5/2) log2) If |X| >= 50 log2, go to 6.
*
*	5. ((5/2) log2 <= |X| < 50 log2) Calculate tanh(X) by
*		sgn := sign(X), y := 2|X|, z := exp(Y),
*		tanh(X) = sgn - [ sgn*2/(1+z) ].
*		Exit.
*
*	6. (|X| >= 50 log2) Tanh(X) = +-1 (round to nearest). Thus, we
*		calculate Tanh(X) by
*		sgn := sign(X), Tiny := 2**(-126),
*		tanh(X) := sgn - sgn*Tiny.
*		Exit.
*
*	7. (|X| < 2**(-40)). Tanh(X) = X.	Exit.
*

*		Copyright (C) Motorola, Inc. 1990
*			All Rights Reserved
*
*	THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF MOTOROLA 
*	The copyright notice above does not evidence any  
*	actual or intended publication of such source code.

STANH	IDNT	2,1 Motorola 040 Floating Point Software Package

	section	15

X	DC.W $0000
XDCARE	DC.W $0000
XFRAC	DC.L $00000000,$00000000,$00000000

SGN	DC.L $00000000

V	DC.L $00000000,$00000000,$00000000,$00000000

	section	8

BOUNDS1	DC.L $3FD78000,$3FFFDDCE ... 2^(-40), (5/2)LOG2

	xref	t_frcinx
	xref	t_extdnrm
	xref	setox
	xref	setoxm1

	xdef	stanhd
stanhd:
*--TANH(X) = X FOR DENORMALIZED X

	bra		t_extdnrm

	xdef	stanh
stanh:
	FMOVE.L		FPCR,d1
	FMOVE.L		#0,FPCR

	FMOVE.X		(a0),FP0	...LOAD INPUT

	FMOVE.X		FP0,X
	move.l		(a0),d0
	move.w		4(a0),d0
	MOVE.L		D0,X
	AND.L		#$7FFFFFFF,D0
#if	NeXT
	CMP2.L		BOUNDS1,D0	...2**(-40) < |X| < (5/2)LOG2 ?
#else	NeXT
	CMP2.L		BOUNDS1(pc),D0	...2**(-40) < |X| < (5/2)LOG2 ?
#endif	NeXT
	BCS.B		TANHBORS

*--THIS IS THE USUAL CASE
*--Y = 2|X|, Z = EXPM1(Y), TANH(X) = SIGN(X) * Z / (Z+2).

	MOVE.L		X,D0
	MOVE.L		D0,SGN
	AND.L		#$7FFF0000,D0
	ADD.L		#$00010000,D0	...EXPONENT OF 2|X|
	MOVE.L		D0,X
	AND.L		#$80000000,SGN
	FMOVE.X		X,FP0		...FP0 IS Y = 2|X|

	move.l		d1,-(a7)
	fmovem.x	fp0,(a0)
	bsr		setoxm1	 	...FP0 IS Z = EXPM1(Y)
	move.l		(a7)+,d1

	FMOVE.X		FP0,FP1
	FADD.S		#:40000000,FP1	...Z+2
	MOVE.L		SGN,D0
	FMOVE.X		FP1,V
	EOR.L		D0,V

	FMOVE.L		d1,FPCR		;restore users exceptions
	FDIV.X		V,FP0
	bra		t_frcinx

TANHBORS:
	CMP.L		#$3FFF8000,D0
	BLT.W		TANHSM

	CMP.L		#$40048AA1,D0
	BGT.W		TANHHUGE

*-- (5/2) LOG2 < |X| < 50 LOG2,
*--TANH(X) = 1 - (2/[EXP(2X)+1]). LET Y = 2|X|, SGN = SIGN(X),
*--TANH(X) = SGN -	SGN*2/[EXP(Y)+1].

	MOVE.L		X,D0
	MOVE.L		D0,SGN
	AND.L		#$7FFF0000,D0
	ADD.L		#$00010000,D0	...EXPO OF 2|X|
	MOVE.L		D0,X		...Y = 2|X|
	AND.L		#$80000000,SGN
	MOVE.L		SGN,D0
	FMOVE.X		X,FP0		...Y = 2|X|

	move.l		d1,-(a7)
	fmovem.x	fp0,(a0)
	bsr		setox		...FP0 IS EXP(Y)
	move.l		(a7)+,d1
	FADD.S		#:3F800000,FP0	...EXP(Y)+1

	EOR.L		#$C0000000,D0	...-SIGN(X)*2
	FMOVE.S		d0,FP1		...-SIGN(X)*2 IN SGL FMT
	FDIV.X		FP0,FP1	 	...-SIGN(X)2 / [EXP(Y)+1 ]

	MOVE.L		SGN,D0
	OR.L		#$3F800000,D0	...SGN
	FMOVE.S		d0,FP0		...SGN IN SGL FMT

	FMOVE.L		d1,FPCR		;restore users exceptions
	FADD.X		fp1,FP0

	bra		t_frcinx

TANHSM:
	MOVE.W		#$0000,XDCARE

	FMOVE.L		d1,FPCR		;restore users exceptions
	FMOVE.X		X,FP0		;last inst - possible exception set

	bra		t_frcinx

TANHHUGE:
*---RETURN SGN(X) - SGN(X)EPS
	MOVE.L		X,D0
	AND.L		#$80000000,D0
	OR.L		#$3F800000,D0
	FMOVE.S		d0,FP0
	AND.L		#$80000000,D0
	EOR.L		#$80800000,D0	...-SIGN(X)*EPS

	FMOVE.L		d1,FPCR		;restore users exceptions
	FADD.S		d0,FP0

	bra		t_frcinx

	end

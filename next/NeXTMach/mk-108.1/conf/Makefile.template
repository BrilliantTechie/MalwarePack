#
# Mach Operating System
# Copyright (c) 1986 Carnegie-Mellon University
# All rights reserved.  The CMU software License Agreement specifies
# the terms and conditions for use and redistribution.
#  
######################################################################
# HISTORY
# 16-Apr-90  Gregg Kellogg (gk) at NeXT
#	Added kernserv mig interface creation
#
# 12-Mar-90  Gregg Kellogg (gk) at NeXT
#	removed cs_*.h from FEATURES_H var.  They aren't used
#	anymore, and screw up the "features" target.
#
#  6-Jan-88  Michael Young (mwyoung) at Carnegie-Mellon University
#	Change references to h/ to sys/.
#	Remove all but the most pertinent history.
#
# 24-Oct-87  David Black (dlb) at Carnegie-Mellon University
#	Name version files explicitly to avoid .BAK .CKP etc.
#
# 10-Oct-87  Mike Accetta (mja) at Carnegie-Mellon University
#	Updated to pass all four version component files to the
#	"newvers.sh" script (which now includes them as kernel
#	variables and creates a version suffix) and changed SYS_RULE_4
#	to also link kernel images with the version suffix provided by
#	this script;  corrected "clean" rule to use new "LOAD" symbol
#	(provided by the "config" program) to remove all configured
#	kernel images related files;  revised symbols.sort rule to
#	use a new MACHINEDIR variable so that it can be overridden
#	for use with directories other than ../machine
#	[ V5.1(XF18) ]
#
# 19-Jan-87  Mike Accetta (mja) at Carnegie-Mellon University
#	Created (from old Makefile.vax).
#	[ V5.1(F1) ]
#
# 01-Oct-86  Mike Accetta (mja) at Carnegie-Mellon University
#	Reorganized to support simplified config program:
#	- COPTS_P variable defines the options used differently when
#	  compiling profiled kernels
#	- LDOBJS is the set of special objects used by the kernel load(s)
#	- LDDEPS is the set of dependencies for the kernel load(s)
#	- SWAPDEPS is the set of dependencies for the swapping module(s)
#	- Kernel configurations are built from a default rule defined here
#	  instead of inside config;  an artificial .swap.sys rule is used 
#	  to trigger this for each swap configuration
#	- Standard rules for building objects in the various normal, driver,
#	  and profiling cases are also defined here instead of inside config.
#	
#	Removed special rules for param.c and replaced PARAM variable
#	with include of new "confdep.h" file now generated by config;
#	also changed ioconf.c to use standard rules.
#	
#	Revised version number processing to eliminate newvers.c program and
#	only increment the version number as part of the archival process
#       rather than on every build.
#
# 18-Apr-86  Robert V. Baron (rvb) at Carnegie-Mellon University
#	Introduce new make depend stuff.
#
######################################################################
#
# Copyright (c) 1980, 1986 Regents of the University of California.
# All rights reserved.  The Berkeley software License Agreement
# specifies the terms and conditions for redistribution.
#

#
#  In order to move the link commands out of config and back into the
#  template makefile, config has been changed to emit a dependency rule
#  of the form *mach.sys: *mach.swap for each configuration so that
#  the common commands for building each configuration can be placed
#  directly in the template in the default rule for the .sys.swap
#  dependency.
#
.SUFFIXES: .swap .sys

#
#  Make sure we don't remove this by accident if interrupted at the wrong
#  time.
#
.PRECIOUS: Makefile

#
#  Compilation components
#
CC=	cc
CPP=	${CC} -E
C2=	/lib/c2
LD=	ld
MD=	md

#
#  This changed in the 4.3 CPP from .n to .d
#
MD_SUFFIX=d

#
#  Pre-processor enviornment
#
DEPENDS=  -MD
INCLUDES= -I.. -I.
LINTOPTS= ${INCLUDES} ${IDENT} -DKERNEL

#
#  Common C-compilation flags
#
COPTS_P=${DEPENDS} ${LINTOPTS}
COPTS=	${COPTS_P}
CFLAGS=	-O ${COPTS}
ASFLAGS=

#
#  Common assembly flags
#
SFLAGS=	${DEPENDS} ${INCLUDES} ${IDENT} -DKERNEL -DASSEMBLER


#
#  Path name of the features include file.
#
FEATURES=../machine/FEATURES.h

#
#  Path name of the version identification files.
#
VERSION_FILES=../conf/version.edit ../conf/version.major \
	../conf/version.minor ../conf/version.variant


#
#  LDOBJS is the set of object files which comprise the kernel.
#  It is used both in the dependency list for each *mach.swap
#  rule emitted by config and also in the .sys.swap rule
#  below which links the kernel from these objects.
#  
#  LDOBJS_PREFIX and LDOBJS_SUFFIX are defined in the machine
#  dependent Makefile (if necessary).
#
LDOBJS=${LDOBJS_PREFIX} locore.o ${OBJS} ioconf.o ${LDOBJS_SUFFIX}

#
#  LDDEPS is the set of extra dependencies associated with each
#  *mach.swap rule (in addition to $LDOBJS and the swap*.o file).
#
#  LDDEPS_PREFIX is defined in the machine dependent Makefile
#  (if necessary).
#
LDDEPS=${LDDEPS_PREFIX} ${VERSION_FILES}

#
#  SWAPDEPS is the set of extra dependencies associated with each
#  swap*.o rule emitted by config (in addition to the
#  ../machine/swap*.c file).
#
#  SWAPDEPS_PREFIX is defined in the machine dependent Makefile
#  (if necessary).
#
SWAPDEPS=${SWAPDEPS_PREFIX} 



#
#  Compilation rules to generate *mach from *mach.sys
#
SYS_RULE_1=@echo checking for new dependencies; \
	rm -f Makefile.cmp; \
	cp Makefile Makefile.cmp
SYS_RULE_2=md -f -d `ls *.${MD_SUFFIX}`
SYS_RULE_3=@-\
	   cmp -s Makefile Makefile.cmp; \
	   if [ "$$?" != 0 -a -f Makefile.cmp ]; \
	   then \
               make $*.sys Makefile; \
	       rm -f Makefile.cmp; \
	   else \
	       exit 0; \
	   fi
SYS_RULE_4=@eval `awk 'NR==1{S=$$1;next;}\
END {\
  C = "ln $*.sys $@";\
  if (S != "") {\
    C = C "; ln $@ $@" S; \
    printf "rm -f $@%s; ", S; \
  }\
  printf "echo \"%s\"; %s\n", C, C; \
}' vers.suffix`

#
#  Things to be done just before exiting
#
EXIT_RULE=${MD} -f -d `ls *.${MD_SUFFIX}`

#
# Compilation rules to generate .o from .b
#
B_RULE_1A=-cp 
B_RULE_1B=$*.b $*.o

#
# Compilation rules to generate .o from .o
#
O_RULE_1A=-cp 
O_RULE_1B=$*.o .

#
# Compilation rules to generate .o from .s
#
S_RULE_1A=${CPP} ${SFLAGS} 
S_RULE_1B=$*.s >$*.i 
S_RULE_2=${AS} ${ASFLAGS} -o $*.o $*.i
S_RULE_3=rm -f $*.i

#
# Compilation rules to generate .o from .c for normal files
#
C_RULE_1A=${CC} -c ${CFLAGS} 
C_RULE_1B=$*.c
C_RULE_2=
C_RULE_3=
C_RULE_4=

#
# Compilation rules to generate .o from .c for driver files
#
C_RULE_1A_D=${C_RULE_1A}
C_RULE_1B_D=${C_RULE_1B}
C_RULE_2_D=${C_RULE_2}
C_RULE_3_D=${C_RULE_3}
C_RULE_4_D=${C_RULE_4}

#
# Compilation rules to generate .o from .c for profiling routine files
#
C_RULE_1A_P=${CC} -c -S ${GDBOPTS} ${COPTS_P} 
C_RULE_1B_P=${C_RULE_1B}
C_RULE_2_P=ex - $*.s < ${GPROF.EX}
C_RULE_3_P=${AS} -o $*.o $*.s
C_RULE_4_P=rm -f $*.s



#
#  This must be here before any rules are possibly defined by the
#  machine dependent makefile fragment so that a plain "make" command
#  always works.  The config program will emit an appropriate rule to
#  cause "all" to depend on every *mach configuration it generates.
#

default: all



#
#  Theses macros are filled in by the config program depending on the
#  current configuration.  The MACHDEP macro is replaced by the
#  contents of the machine dependent makefile template and the others
#  are replaced by the corresponding symbol definitions for the
#  configuration.
#

%MACHDEP

%OBJS

%CFILES

%SFILES

%BFILES



#
#  Default rule used to build a *mach.sys configuration from the
#  object list and a particular *mach.swap module.  The *mach.swap
#  module is a normal object file compiled from the appropriate swap*.c
#  file and then copied to the *mach.swap name to trigger the full
#  kernel link using this default rule.
#

.swap.sys: 
	@sh ../conf/newvers.sh `cat ${VERSION_FILES}`
	@${CC} -c ${CFLAGS} vers.c
	@rm -f $* $*.sys
	@echo loading $*.sys
	@${LD} ${LDFLAGS} ${LDOBJS} vers.o $*.swap ${LIBS}
	@size a.out
	@chmod 755 a.out
	@mv a.out $*.sys



#
#  OBJSDEPS is the set of files (defined in the machine dependent
#  template if necessary) which all objects depend on (such as an
#  in-line assembler expansion filter
#

${OBJS}: ${OBJSDEPS}



#
#  This macro is replaced by three rules per configuration, plus a
#  final definition for the LOAD symbol consisting of all configuration
#  names and a dependency of "all" on this symbol (so that the
#  "default" rule above will build everything).  The three rules in
#  each configuration are:
#
#  - a *mach from *mach.sys dependency using the SYS_RULE_* rules,
#  - a *mach.swap from LDDEPS, swap*.o, and LDDEPS dependency that
#    simply copies the swap file to the target name, and
#  - a swap*.o from swap*.c and SWAPDEPS dependency using the C_RULE_* rules.
#

%LOAD



#
#  Rules for components which are not part of the kernel proper or that
#  need to be built in a special manner.
#

genassym.o: ../machine/genassym.c
	${CC} -c ${COPTS_P} ../machine/genassym.c

assym.s: genassym.o
	rm -f assym.s
	${CC} genassym.o
	./a.out > assym.s; rm -f a.out

locore.o: assym.s locore.c ${LOCORE_HEADS}
	rm -f locore.i
	${CC} -E -DLOCORE -I../machine ${SFLAGS} locore.c >locore.i
	${AS} ${ASFLAGS} -o locore.o ${LOCORE_HEADS} locore.i
	rm locore.i

ioconf.o: ioconf.c
	${C_RULE_1A}${C_RULE_1B}
	${C_RULE_2}
	${C_RULE_3}
	${C_RULE_4}

#
#  Mach IPC-based interfaces
#

MACH_DEFSFILES=\
	../kern/std_types.defs \
	../kern/mach_types.defs \
	../kern/mach.defs \
	../kern/mach_debug.defs \
	../kern/mach_debug_types.defs \
	../kern/mach_host.defs \
	../kern/exc.defs \
	../kern/pager.defs \
	../kern/pager_default.defs

MACH_GENFILES=\
	../kern/mach_interface.h \
	../kern/mach_server.c \
	../kern/mach_user_internal.h \
	../kern/mach_debug.h \
	../kern/mach_debug_server.c \
	../kern/mach_host.h \
	../kern/mach_host_server.c \
	../kern/mach_host_internal.h \
	../kern/exc_server.c \
	../kern/exc_user.c \
	../kern/exc.h \
	../kern/pager_user.c \
	../kern/pager.h \
	../kern/pager_default_user.c \
	../kern/pager_default.h

MACH_MKFILE=	../kern/Makefile

mach_user_internal.o $(MACH_GENFILES) : mach_migfiles

mach_migfiles :: $(MACH_DEFSFILES) $(MACH_MKFILE)
	rm -rf ./kern
	mkdir ./kern
	cp -p ${MACH_DEFSFILES} ./kern/
	cp -p $(MACH_MKFILE) ./kern/
	cd ./kern \
		&& make \
		&& install -d -c -u $(MACH_GENFILES) .. \
		&& rm -f ../mach_migfiles \
		&& touch ../mach_migfiles

KERNSERV_DEFSFILES=\
	../kernserv/kern_server.defs \
	../kernserv/kern_server_reply.defs

KERNSERV_GENFILES=\
	../kernserv/kern_server.h \
	../kernserv/kern_server_reply.h \
	../kernserv/kern_server_reply_user.c

KERNSERV_MKFILE=	../kernserv/Makefile

kern_server_handler.o $(KERNSERV_GENFILES) : kernserv_migfiles

kernserv_migfiles :: $(KERNSERV_DEFSFILES) $(KERNSERV_MKFILE)
	rm -rf ./kernserv
	mkdir ./kernserv
	cp -p ${KERNSERV_DEFSFILES} ./kernserv/
	cp -p $(KERNSERV_MKFILE) ./kernserv/
	cd ./kernserv \
		&& make \
		&& install -d -c -u $(KERNSERV_GENFILES) .. \
		&& rm -f ../kernserv_migfiles \
		&& touch ../kernserv_migfiles

migfiles: mach_migfiles kernserv_migfiles

#
#  Update the Makefile when any dependency files exist rather than only
#  when they are newer than the makefile (since it often gets touched
#  during reconfigurations when dependency files have yet to be
#  integrated).  The makefile is copied before doing any potential
#  integration so that the new and old versions can be compared when
#  done (by the SYS_RULE_* rules) to prevent re-building things when no
#  dependencies change.
#
#  N.B.  There is always an empty artificial dependency file M.d
#  (created by config) which will never be integrated and simply
#  prevents the wild-card expansion below from failing.
#

Makefile: *.${MD_SUFFIX}
	@rm -f Makefile.cmp; cp Makefile Makefile.cmp
	${EXIT_RULE}

.EXIT:
	${EXIT_RULE}

depend: 
	@echo you don\'t make depend any more.



#
#  Build the features file for the current configuration.  This isn't
#  actually used by the kernel per-se but rather by application
#  programs which use kernel include files and need the various option
#  definitions.  It is only run manually since the features may change
#  from configuration to configuration, only one of which can be
#  exported to user applications.
#

always:

FEATURES_H=mach_*.h sun_*.h hw_ast.h \
		cputypes.h cpus.h simple_clock.h stat_time.h \
		${FEATURES_EXTRA}

${FEATURES}: ${FEATURES_H} always
	rm -f features.temp
	sort ${FEATURES_H} >features.temp
	-diff $@ features.temp
	rm -f $@
	mv -f features.temp $@

features: ${FEATURES}

#
#  Clean up the current build directory.
#

clean:
	@for f in ${LOAD}; do echo rm -f $$f $$f.* && rm -f $$f $$f.*; done
	rm -f eddep *.o locore.i \
		linterrs makelinks *.log *LOG* ${CLEAN_EXTRA} \
		${MACH_GENFILES} ${KERNSERV_GENFILES}
	rm -rf kern kernserv mach_migfiles kernserv_migfiles


#
#  Run "lint" on the current build directory.  This will often be done
#  with a special configuration that defines the union of all options
#  used in all configurations so that all combinations are checked.
#  The LINTFILES variable allows lint to be easily run on an optional
#  sub-set of files specified on the make command line when this is
#  desired.
#

LINTFILES=../machine/Locore.c ${CFILES} ../machine/swapgeneric.c ioconf.c

lint:	ALWAYS assym.s
	@lint -n -hbxn -DGENERIC ${LINTOPTS} ${LINTFILES} | \
	    grep -v 'struct/union .* never defined' | \
	    grep -v 'possible pointer alignment problem'

ALWAYS:

#
#  This macro is replaced by the set of rules which build everything in
#  OBJS.  The extra dependencies for each object file are inserted
#  following this by md which uses the keys on the sentinel line
#  below.
#

%RULES


# DO NOT DELETE THIS LINE -- "make Makefile" uses it




